import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Zeta data
ratio0_zeta = np.array([0, 0.6432141900737977, 0.26231517988512754, 0, 0, 0.9710033899612511, 0.1461889298737325, 0.9015366321328295, 1.1394427589104996, 1.2745596383334394, 1.0980360579681494, 1.1997997113370333])
ratio1_zeta = np.array([0, 0.5173641628202729, 0.25902561928345197, 0, 0, 0.9253378102738982, 0.1360779687331669, 0.8506729246131384, 1.100342686869395, 1.3085760744476183, 1.0311375010237032, 1.1388484961156078])
ln_cac1_zeta = np.array([0, 0, 0, 0, 0, 4.143134726391533, 0, 3.6888794541139363, 5.869296913133774, 4.912654885736052, 5.863631175598097, 5.267858159063328])

# Theta data
ratio0_theta = np.array([0, 0, 0, 0, 0, 0.35285263872984957, 0.9647593924678355, 0.877286031413336, 1.0411460407002446, 0.3255009363788492, 0, 0.7724007307085876, 0.6036728262897569, 0.27144150822594215, 0.45205229008535625, 0.8318813233527058, 0.22164943200951182, 0.6604399736330077, 0.8607555653155671, 1.0010636260309163, 0.9175571828446315, 1.0281475831090183, 0.8289472102329216])
ratio1_theta = np.array([0, 0, 0, 0, 0, 0.3297159881728276, 0.8691756693182583, 0.8267776654084305, 0.8923483493991499, 0.31927963388710684, 0, 0.6707750237222871, 0.5776613396057578, 0.25680855464584623, 0.4491694490897574, 0.8033125469454092, 0.20896115182777275, 0.6485015093091424, 0.7963474917371539, 0.8893916599278506, 0.891574050402815, 0.9861109838733201, 0.7557726453415707])
ln_cac1_theta = np.array([0.6931471805599453, 1.0986122886681098, 0.6931471805599453, 0.6931471805599453, 0.6931471805599453, 1.9459101490553132, 3.6375861597263857, 2.6390573296152584, 4.219507705176107, 2.1972245773362196, 1.3862943611198906, 3.091042453358316, 2.9444389791664403, 1.791759469228055, 2.8903717578961645, 3.912023005428146, 2.0794415416798357, 3.4657359027997265, 4.406719247264253, 4.6443908991413725, 4.8283137373023015, 5.707110264748875, 4.007333185232471])

# Eta data
ratio0_eta = np.array([0.8688607994125579, 1.0630901185378252, 0.9961730542492246, 0.8175811528613812, 0.9622938095066099, 0.9631345449908901, 1.0484241406252823, 0.7062302027241281, 0.9822425957367792, 0.9072391782794026, 0.8193105055662985, 1.1930588223437388, 0.9334484316946257, 1.1395504941992651, 1.0525373565090204, 1.229792181584599, 0.883830680147293])
ratio1_eta = np.array([0.8408890290104237, 0.8983622221657899, 0.8586308679540858, 0.7681527424747342, 0.9330379097641369, 0.8989095019787317, 1.033377601382106, 0.664608080850563, 0.9191112554962112, 0.8835428801490052, 0.7832104228023535, 1.130087818908135, 0.8919864268699415, 1.0594671601894434, 0.9933697952812031, 1.1339433933635201, 0.842936576767417])
ln_cac1_eta = np.array([3.7376696182833684, 4.663439094112067, 4.584967478670572, 4.6443908991413725, 4.584967478670572, 5.389071729816501, 5.5053315359323625, 3.58351893845611, 5.537334267018537, 5.541263545158426, 4.61512051684126, 5.993961427306569, 5.442417710521793, 6.645090969505644, 5.777652323222656, 5.60947179518496, 5.54907608489522])

# Matrix transform 
def matrix_project(left_x, right_x, y, b=0.5):
    disparity = left_x - right_x
    proj_matrix = np.array([
        [1, 0, 0, 0],
        [0, 1, 0, 0],
        [0, 0, 1, 0],
        [0, 0, -1/b, 1]
    ])
    point_left = np.array([left_x, y, 0, 1])
    projected = proj_matrix @ point_left
    projected[2] += disparity * 40  # Adjust depth with disparity
    return projected[0], projected[1], projected[2]

# Transform data to 3D points
x_zeta_proj, y_zeta_proj, z_zeta_proj = np.vectorize(matrix_project)(ratio0_zeta, ratio1_zeta, ln_cac1_zeta)
x_theta_proj, y_theta_proj, z_theta_proj = np.vectorize(matrix_project)(ratio0_theta, ratio1_theta, ln_cac1_theta)
x_eta_proj, y_eta_proj, z_eta_proj = np.vectorize(matrix_project)(ratio0_eta, ratio1_eta, ln_cac1_eta)

# Plot without masking zeros (points at Z=0 if disparity=0)
fig = plt.figure(figsize=(12, 10))
ax = fig.add_subplot(111, projection='3d')

# Plot Zeta
ax.scatter(x_zeta_proj, y_zeta_proj, z_zeta_proj, c='orange', marker='D', label='ζ Zeta (Reversing, N=12)')

# Plot Theta
ax.scatter(x_theta_proj, y_theta_proj, z_theta_proj, c='purple', marker='o', label='θ Theta (Smaller CAC increase, N=23)')
# Theta Vector to show directon of CAC and Ncpv movement of the time  
arrow_length = 0.13  # Small to keep it subtle
ax.quiver(x_theta_proj, y_theta_proj - arrow_length, z_theta_proj - arrow_length, 0, arrow_length, arrow_length, color='purple', arrow_length_ratio=0.3)

# Plot Eta
ax.scatter(x_eta_proj, y_eta_proj, z_eta_proj, c='green', marker='s', label='η Eta (Larger CAC increase, N=17)')

# Highlight your point (in Theta)
user_x = 0.772404
user_index_theta = np.argmin(np.abs(ratio0_theta - user_x))
ax.scatter(x_theta_proj[user_index_theta], y_theta_proj[user_index_theta], z_theta_proj[user_index_theta], c='magenta', marker='*', s=150, label='Your Point')

ax.set_xlabel('Average Ratio')
ax.set_ylabel('ln(CAC1 + 1)')
ax.set_zlabel('Stereo Depth (Disparity x40)')
ax.set_title('Stereo-Projected 3D Plot of Plaque Regressions (Time Shift as Depth)')
ax.legend()

plt.show()