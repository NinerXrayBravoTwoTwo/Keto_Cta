import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
# 
# LnPav0 / LnNcpv0 vs. LnPav1 -- Alpha
# Slope; 6.7999 N=88 R^2: 0.9575 p-value: 0.000010 y-int -0.0016

# LnPav0 / LnNcpv1 vs. LnPav1 -- Alpha
# Slope; 7.0345 N=88 R^2: 0.9490 p-value: 0.000051 y-int 0.0004

# 3D Gamma data
x_gamma = np.array([0.00171174, 0.00148668, 0.00097075, 0.00248295, 0.00204944, 0.00633152, 0.00401484, 0.00063719, 0.00315601, 0.00382036, 0.00112567, 0.00178018, 0.00189742, 0.00270345, np.nan, 0.00090933, np.nan, 0.00438560, 0.00186510, 0.00100629, 0.00161355, 0.00052547, 0.00174255, np.nan, 0.00249749, 0.00108555, 0.00512684, 0.00125400, 0.00068524, np.nan, 0.00249371, 0.00339868, 0.00382410, 0.00226679, 0.00085930, 0.00153820, 0.00279752, 0.00171900, 0.00216174, 0.00114167, 0.00572575, 0.00166767, 0.00127374, 0.00196486, 0.00383418, 0.00329733, 0.00557593, 0.00059268])
y_gamma = np.array([0.00133706, 0.00094011, 0.00043221, 0.00214610, 0.00195632, 0.00561275, 0.00380965, 0.00037772, 0.00285337, 0.00312634, 0.00069530, 0.00161837, 0.00148024, 0.00209571, np.nan, 0.00071583, 0.00000000, 0.00403823, 0.00162075, 0.00048658, 0.00118079, 0.00041842, 0.00122115, 0.00000000, 0.00242587, 0.00108555, 0.00468700, 0.00080985, 0.00043408, 0.00000000, 0.00212369, 0.00293825, 0.00316765, 0.00211412, 0.00042169, 0.00125612, 0.00234960, 0.00152367, 0.00194208, 0.00058017, 0.00472662, 0.00159289, 0.00124143, 0.00169923, 0.00345212, 0.00235067, 0.00495545, 0.00039957])
z_gamma = np.array([0.00697561, 0.00796817, 0.00498754, 0.00995033, 0.00598207, 0.02955880, 0.02078254, 0.00399202, 0.01685712, 0.01980263, 0.00598207, 0.00796817, 0.01587335, 0.02371653, 0.00000000, 0.00399202, 0.01192857, 0.02371653, 0.01093994, 0.00299551, 0.01587335, 0.00199800, 0.01882175, 0.00399202, 0.00796817, 0.00199800, 0.03729578, 0.01093994, 0.00399202, 0.00199800, 0.01093994, 0.01980263, 0.03440143, 0.00995033, 0.00299551, 0.00697561, 0.01390291, 0.00697561, 0.00995033, 0.00199800, 0.04305949, 0.00995033, 0.00299551, 0.00995033, 0.02371653, 0.05069311, 0.04592893, 0.00399202])

# 3D Theta data
x_theta = np.array([0.00150689, 0.00401719, 0.00270942, 0.00387051, 0.00837890, 0.00669321, 0.00447084, 0.00303588, 0.00446609, 0.00519118, 0.00984256, 0.00641395, 0.00374822, 0.00711392, 0.01421533, 0.00622751, 0.01232618, 0.00920020, 0.01067278, 0.01158876, 0.01007972, 0.01672743, 0.01588417])
y_theta = np.array([0.00098700, 0.00366675, 0.00217349, 0.00310337, 0.00690471, 0.00625434, 0.00402789, 0.00286109, 0.00382781, 0.00509196, 0.00945622, 0.00557006, 0.00358672, 0.00673043, 0.01412467, 0.00601364, 0.01162057, 0.00903389, 0.00987417, 0.01029600, 0.00979429, 0.01604351, 0.01448201])
z_theta = np.array([0.00895974, 0.02273949, 0.02078254, 0.02858746, 0.08617770, 0.03729578, 0.02273949, 0.00895974, 0.03149867, 0.03149867, 0.07045846, 0.04305949, 0.01488861, 0.04974209, 0.08984070, 0.03825871, 0.07696104, 0.04879016, 0.06765865, 0.08617770, 0.06952606, 0.11422114, 0.10074990])

# 3D Eta data
x_eta = np.array([0.00567423, 0.00836630, 0.00712052, 0.00960925, 0.01160172, 0.01679276, 0.01353754, 0.00674746, 0.01195071, 0.02455269, 0.01589739, 0.01906752, 0.02153209, 0.02377397, 0.02169976, 0.01599751, 0.02200808])
y_eta = np.array([0.00549156, 0.00706992, 0.00613738, 0.00902830, 0.01124900, 0.01567296, 0.01334325, 0.00634979, 0.01118260, 0.02391140, 0.01519693, 0.01806111, 0.02057568, 0.02210323, 0.02047992, 0.01475068, 0.02098978])
z_eta = np.array([0.02566775, 0.05448819, 0.05448819, 0.06485097, 0.07510747, 0.11511281, 0.07417940, 0.03825871, 0.09621886, 0.18232156, 0.10074990, 0.09531018, 0.15186235, 0.16211885, 0.13627762, 0.09257918, 0.17311262])

# 3D Zeta data
x_zeta = np.array([0.01230708, 0.00328905, 0.00379007, 0.00536688, 0.00213389, 0.01097049, 0.00643879, 0.00674996, 0.02071493, 0.02307139, 0.01755432, 0.01634974])
y_zeta = np.array([0.01209403, 0.00264552, 0.00374254, 0.00531023, 0.00172606, 0.01045455, 0.00599346, 0.00636913, 0.02000409, 0.02368713, 0.01648481, 0.01551915])
z_zeta = np.array([0.09349034, 0.02664193, 0.02566775, 0.03052921, 0.01192857, 0.04688359, 0.04497337, 0.03922071, 0.11422114, 0.06485097, 0.10975086, 0.08342161])

# Gamma data
ratio0_gamma = np.array([0.00171174, 0.00148668, 0.00097075, 0.00248295, 0.00204944, 0.00633152, 0.00401484, 0.00063719, 0.00315601, 0.00382036, 0.00112567, 0.00178018, 0.00189742, 0.00270345, np.nan, 0.00090933, np.nan, 0.00438560, 0.00186510, 0.00100629, 0.00161355, 0.00052547, 0.00174255, np.nan, 0.00249749, 0.00108555, 0.00512684, 0.00125400, 0.00068524, np.nan, 0.00249371, 0.00339868, 0.00382410, 0.00226679, 0.00085930, 0.00153820, 0.00279752, 0.00171900, 0.00216174, 0.00114167, 0.00572575, 0.00166767, 0.00127374, 0.00196486, 0.00383418, 0.00329733, 0.00557593, 0.00059268])
ratio1_gamma = np.array([0.00133706, 0.00094011, 0.00043221, 0.00214610, 0.00195632, 0.00561275, 0.00380965, 0.00037772, 0.00285337, 0.00312634, 0.00069530, 0.00161837, 0.00148024, 0.00209571, np.nan, 0.00071583, 0.00000000, 0.00403823, 0.00162075, 0.00048658, 0.00118079, 0.00041842, 0.00122115, 0.00000000, 0.00242587, 0.00108555, 0.00468700, 0.00080985, 0.00043408, 0.00000000, 0.00212369, 0.00293825, 0.00316765, 0.00211412, 0.00042169, 0.00125612, 0.00234960, 0.00152367, 0.00194208, 0.00058017, 0.00472662, 0.00159289, 0.00124143, 0.00169923, 0.00345212, 0.00235067, 0.00495545, 0.00039957])
ln_pav1_gamma = np.array([0.00697561, 0.00796817, 0.00498754, 0.00995033, 0.00598207, 0.02955880, 0.02078254, 0.00399202, 0.01685712, 0.01980263, 0.00598207, 0.00796817, 0.01587335, 0.02371653, 0.00000000, 0.00399202, 0.01192857, 0.02371653, 0.01093994, 0.00299551, 0.01587335, 0.00199800, 0.01882175, 0.00399202, 0.00796817, 0.00199800, 0.03729578, 0.01093994, 0.00399202, 0.00199800, 0.01093994, 0.01980263, 0.03440143, 0.00995033, 0.00299551, 0.00697561, 0.01390291, 0.00697561, 0.00995033, 0.00199800, 0.04305949, 0.00995033, 0.00299551, 0.00995033, 0.02371653, 0.05069311, 0.04592893, 0.00399202])

# Theta data
ratio0_theta = np.array([0.00150689, 0.00401719, 0.00270942, 0.00387051, 0.00837890, 0.00669321, 0.00447084, 0.00303588, 0.00446609, 0.00519118, 0.00984256, 0.00641395, 0.00374822, 0.00711392, 0.01421533, 0.00622751, 0.01232618, 0.00920020, 0.01067278, 0.01158876, 0.01007972, 0.01672743, 0.01588417])
ratio1_theta = np.array([0.00098700, 0.00366675, 0.00217349, 0.00310337, 0.00690471, 0.00625434, 0.00402789, 0.00286109, 0.00382781, 0.00509196, 0.00945622, 0.00557006, 0.00358672, 0.00673043, 0.01412467, 0.00601364, 0.01162057, 0.00903389, 0.00987417, 0.01029600, 0.00979429, 0.01604351, 0.01448201])
ln_pav1_theta = np.array([0.00895974, 0.02273949, 0.02078254, 0.02858746, 0.08617770, 0.03729578, 0.02273949, 0.00895974, 0.03149867, 0.03149867, 0.07045846, 0.04305949, 0.01488861, 0.04974209, 0.08984070, 0.03825871, 0.07696104, 0.04879016, 0.06765865, 0.08617770, 0.06952606, 0.11422114, 0.10074990])

# Eta data
ratio0_eta = np.array([0.00567423, 0.00836630, 0.00712052, 0.00960925, 0.01160172, 0.01679276, 0.01353754, 0.00674746, 0.01195071, 0.02455269, 0.01589739, 0.01906752, 0.02153209, 0.02377397, 0.02169976, 0.01599751, 0.02200808])
ratio1_eta = np.array([0.00549156, 0.00706992, 0.00613738, 0.00902830, 0.01124900, 0.01567296, 0.01334325, 0.00634979, 0.01118260, 0.02391140, 0.01519693, 0.01806111, 0.02057568, 0.02210323, 0.02047992, 0.01475068, 0.02098978])
ln_pav1_eta = np.array([0.02566775, 0.05448819, 0.05448819, 0.06485097, 0.07510747, 0.11511281, 0.07417940, 0.03825871, 0.09621886, 0.18232156, 0.10074990, 0.09531018, 0.15186235, 0.16211885, 0.13627762, 0.09257918, 0.17311262])

# Zeta data
ratio0_zeta = np.array([0.01230708, 0.00328905, 0.00379007, 0.00536688, 0.00213389, 0.01097049, 0.00643879, 0.00674996, 0.02071493, 0.02307139, 0.01755432, 0.01634974])
ratio1_zeta = np.array([0.01209403, 0.00264552, 0.00374254, 0.00531023, 0.00172606, 0.01045455, 0.00599346, 0.00636913, 0.02000409, 0.02368713, 0.01648481, 0.01551915])
ln_pav1_zeta = np.array([0.09349034, 0.02664193, 0.02566775, 0.03052921, 0.01192857, 0.04688359, 0.04497337, 0.03922071, 0.11422114, 0.06485097, 0.10975086, 0.08342161])


# Matrix transform 
def matrix_project(left_x, right_x, y, b=0.5):
    disparity = left_x - right_x
    proj_matrix = np.array([
        [1, 0, 0, 0],
        [0, 1, 0, 0],
        [0, 0, 1, 0],
        [0, 0, -1/b, 1]
    ])
    disparity =left_x-right_x;
    point_left = np.array([left_x, y, 0, 1])
    projected = proj_matrix @ point_left
    projected[2] += disparity * 40  # Adjust depth with disparity
    return projected[0], projected[1], projected[2], disparity

# Transform data to 3D points
x_zeta_proj, y_zeta_proj, z_zeta_proj, disparity_zeta = np.vectorize(matrix_project)(ratio0_zeta, ratio1_zeta, ln_pav1_zeta)
x_theta_proj, y_theta_proj, z_theta_proj, disparity_theta = np.vectorize(matrix_project)(ratio0_theta, ratio1_theta, ln_pav1_theta)
x_eta_proj, y_eta_proj, z_eta_proj, disparity_eta = np.vectorize(matrix_project)(ratio0_eta, ratio1_eta, ln_pav1_eta)
x_gamma_proj, y_gamma_proj, z_gamma_proj, disparity_gamma = np.vectorize(matrix_project)(ratio0_gamma, ratio1_gamma, ln_pav1_gamma)

# Plot without masking zeros (points at Z=0 if disparity=0)
fig = plt.figure(figsize=(12, 10))
ax = fig.add_subplot(111, projection='3d')

# Plot Zeta
ax.scatter(x_zeta_proj, y_zeta_proj, z_zeta_proj, c='orange', marker='D', label='ζ Zeta (Reversing, N=12)')

# Plot Theta
ax.scatter(x_theta_proj, y_theta_proj, z_theta_proj, c='purple', marker='o', label='θ Theta (Smaller CAC increase, N=23)')

# Plot Eta
ax.scatter(x_eta_proj, y_eta_proj, z_eta_proj, c='green', marker='s', label='η Eta (Larger CAC increase, N=17)')

# Plot Gamma
ax.scatter(x_gamma_proj, y_gamma_proj, z_gamma_proj, c='blue', marker='^', label='γ Gamma (Example Data, N=40)')

# Highlight your point (in Theta)
user_x = 0.772404
user_index_theta = np.argmin(np.abs(ratio0_theta - user_x))
ax.scatter(x_theta_proj[user_index_theta], y_theta_proj[user_index_theta], z_theta_proj[user_index_theta], c='magenta', marker='*', s=150, label='Your Point')


# Add vectors for movement (length determined by magnitude of U,V,W; no 'length' param)
arrow_length_scale = 0.5  # Adjust to make arrows shorter/longer
mask_theta = disparity_theta != 0  # Skip zeros
ax.quiver(x_theta_proj[mask_theta], y_theta_proj[mask_theta], z_theta_proj[mask_theta],
          disparity_theta[mask_theta] * arrow_length_scale, 0, disparity_theta[mask_theta] * arrow_length_scale, 
          color='purple', arrow_length_ratio=0.3)

# Repeat for Eta
mask_eta = disparity_eta != 0
ax.quiver(x_eta_proj[mask_eta], y_eta_proj[mask_eta], z_eta_proj[mask_eta],
          disparity_eta[mask_eta] * arrow_length_scale, 0, disparity_eta[mask_eta] * arrow_length_scale, 
          color='green', arrow_length_ratio=0.3)

# Repeat for Zeta
mask_zeta = disparity_zeta != 0
ax.quiver(x_zeta_proj[mask_zeta], y_zeta_proj[mask_zeta], z_zeta_proj[mask_zeta],
          disparity_zeta[mask_zeta] * arrow_length_scale, 0, disparity_zeta[mask_zeta] * arrow_length_scale, 
          color='orange', arrow_length_ratio=0.3)

mask_gamma = disparity_gamma != 0
ax.quiver(x_gamma_proj[mask_gamma], y_gamma_proj[mask_gamma], z_gamma_proj[mask_gamma],
          disparity_gamma[mask_gamma] * arrow_length_scale, 0, disparity_gamma[mask_gamma] * arrow_length_scale, 
          color='blue', arrow_length_ratio=0.3)


ax.set_xlabel('Average Ratio')
ax.set_ylabel('ln(Pav1 + 1)')
ax.set_zlabel('Stereo Depth (Disparity x40)')
ax.set_title('Stereo-Projected 3D Plot of Plaque Regressions (Time Shift as Depth)')
ax.legend()

plt.show()
